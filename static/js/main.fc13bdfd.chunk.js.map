{"version":3,"sources":["Containers/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","state","details","toggle","setState","this","props","name","email","id","address","className","onClick","alt","src","width","height","street","suite","city","zipcode","Component","CardList","people","cardsArray","map","user","i","key","SearchBox","searchChange","style","outline","type","placeholder","onChange","Scroll","overflowY","border","children","App","onSearchChange","event","searchField","target","value","console","log","fetch","then","response","json","users","filteredPeople","filter","person","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TA+CeA,G,iNA3CbC,MAAQ,CACNC,SAAS,G,EAGXC,OAAS,WACP,EAAKC,SAAS,CACZF,SAAU,EAAKD,MAAMC,W,wEAIhB,IAAD,EAC+BG,KAAKC,MAAlCC,EADF,EACEA,KAAMC,EADR,EACQA,MAAOC,EADf,EACeA,GAAKC,EADpB,EACoBA,QAC1B,OACE,yBAAKD,GAAG,OAAOE,UAAU,qDAAqDC,QAASP,KAAKF,SAExFE,KAAKJ,MAAMC,SACb,yBAAKO,GAAG,gBACN,6BACE,yBAAKI,IAAI,SAASC,IAAG,+BAA0BL,GAAMM,MAAM,QAAQC,OAAO,UAC1E,yBAAKP,GAAG,QACJ,4BAAI,gCAASF,IACb,2BAAIC,MAKXH,KAAKJ,MAAMC,SACV,yBAAKO,GAAG,gBACN,yBAAKA,GAAG,kBAAkBE,UAAU,4BAClC,4BAAI,2CAAJ,IAA8BD,EAAQO,QACtC,4BAAI,0CAAJ,IAA6BP,EAAQQ,OACrC,4BAAI,yCAAJ,IAA4BR,EAAQS,MACpC,4BAAI,wCAAJ,IAA2BT,EAAQU,gB,GAjC9BC,cCeJC,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAaD,EAAOE,IAAI,SAACC,EAAMC,GACjC,OACI,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGlB,GAAIA,GAAIc,EAAOI,GAAGlB,GAAIF,KAAMgB,EAAOI,GAAGpB,KAAMC,MAAOe,EAAOI,GAAGnB,MAAOE,QAASa,EAAOI,GAAGjB,YAIpH,OACQ,6BACKc,ICDFK,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKnB,UAAU,OACX,2BAAOoB,MAAO,CAACC,QAAQ,QAASrB,UAAU,4BACtCsB,KAAK,SAASC,YAAY,mBAAmBC,SAAUL,MCIxDM,EARA,SAAC9B,GACZ,OACI,yBAAKyB,MAAO,CAACM,UAAW,SAAUC,OAAQ,kBAAmBtB,OAAQ,SAChEV,EAAMiC,WC2CJC,G,kBAzCb,aAAe,IAAD,8BACZ,+CAkBFC,eAAiB,SAACC,GAChB,EAAKtC,SAAS,CAAEuC,YAAaD,EAAME,OAAOC,SAlB1C,EAAK5C,MAAQ,CACXsB,OAAQ,GACRoB,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,QAAQC,IAAI,WACZC,MAAM,8CACHC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACF,EAAKhD,SAAS,CAACmB,OAAS6B,Q,+BAQvB,IAAD,OACAC,EAAiBhD,KAAKJ,MAAMsB,OAAO+B,OAAO,SAAAC,GAC9C,OAAOA,EAAOhD,KAAKiD,cAAcC,SAAS,EAAKxD,MAAM0C,YAAYa,iBAInE,OACE,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,sBACA,kBAAC,EAAD,CAAWmB,aAAczB,KAAKoC,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GAnCVhC,cCMEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.fc13bdfd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  state = {\r\n    details: false\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      details: !this.state.details\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { name, email, id , address} = this.props;\r\n    return (\r\n      <div id='Card' className=\"tc bg-light-blue dib br3 pv2 ma2 grow bw2 shadow-5\" onClick={this.toggle}>\r\n    \r\n        {!this.state.details && ( //default view\r\n        <div id=\"cardContents\">\r\n          <div>\r\n            <img alt='person' src={`https://flathash.com/${id}`} width='200px' height='200px'/>\r\n            <div id=\"info\">\r\n                <h2><strong>{name}</strong></h2>\r\n                <p>{email}</p>\r\n            </div>\r\n          </div>\r\n          </div>\r\n        )}\r\n        {this.state.details && ( //details view\r\n          <div id=\"cardContents\">\r\n            <div id=\"detailContainer\" className=\"tc bg-white dib br3  ma2\">\r\n              <h2><strong>Street:</strong> {address.street}</h2>\r\n              <h2><strong>Suite:</strong> {address.suite}</h2>\r\n              <h2><strong>City:</strong> {address.city}</h2>\r\n              <h2><strong>Zip:</strong> {address.zipcode}</h2>\r\n            </div>\r\n          \r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Containers/Card';\r\n\r\nconst CardList = ({ people }) => {\r\n    const cardsArray = people.map((user, i) =>{\r\n        return(\r\n            <Card key={people[i].id} id={people[i].id} name={people[i].name} email={people[i].email} address={people[i].address}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n            <div>\r\n                {cardsArray}\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input style={{outline:'none'}} className='pa3 br3 b--black bg-white'\r\n                type='search' placeholder='Search Directory' onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '75vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      searchField: '',\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n          return response.json();\n      })\n      .then(users => {\n          this.setState({people : users});\n    })\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render(){\n    const filteredPeople = this.state.people.filter(person => {\n      return person.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    })\n    // console.log(filteredPeople);\n\n    return (\n      <div className='tc'>\n        <h1 className='f1'>Employee Directory</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <CardList people={filteredPeople}/>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; \n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}